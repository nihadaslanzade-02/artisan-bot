# payment_service.py dosyasƒ±nƒ± olu≈üturalƒ±m

from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dispatcher import bot, dp
from db import (
    get_artisan_by_id, get_customer_by_id, get_order_details,
    set_order_price, update_payment_method, save_payment_receipt,
    get_connection, set_user_context, clear_user_context
)
import logging
import asyncio
import datetime
from config import COMMISSION_RATES, ADMIN_CARD_NUMBER, ADMIN_CARD_HOLDER

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def notify_customer_about_price(order_id, price):
    """M√º≈üteriye belirlenen fiyat hakkƒ±nda bildirim g√∂nderir"""
    try:
        # Get order details
        order = get_order_details(order_id)
        if not order:
            logger.error(f"Order {order_id} not found for price notification")
            return False
        
        # Get customer details
        customer = get_customer_by_id(order['customer_id'])
        if not customer:
            logger.error(f"Customer not found for order {order_id}")
            return False
        
        customer_telegram_id = customer.get('telegram_id')
        if not customer_telegram_id:
            logger.error(f"Customer telegram ID not found for order {order_id}")
            return False
        
        # Get artisan details
        artisan = get_artisan_by_id(order['artisan_id'])
        if not artisan:
            logger.error(f"Artisan not found for order {order_id}")
            return False
        
        artisan_name = artisan.get('name', 'Usta')
        
        # Create confirmation keyboard
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("‚úÖ Q…ôbul edir…ôm", callback_data=f"accept_price_{order_id}"),
            InlineKeyboardButton("‚ùå Q…ôbul etmir…ôm", callback_data=f"reject_price_{order_id}")
        )
        
        # Send price notification to customer
        await bot.send_message(
            chat_id=customer_telegram_id,
            text=f"üí∞ *T…ôyin edilmi≈ü qiym…ôt*\n\n"
                 f"Usta *{artisan_name}* sifari≈ü #{order_id} √º√ß√ºn "
                 f"*{price} AZN* m…ôbl…ôƒüind…ô qiym…ôt t…ôyin etdi.\n\n"
                 f"Bu qiym…ôti q…ôbul edirsinizmi?",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        return True
        
    except Exception as e:
        logger.error(f"Error in notify_customer_about_price: {e}")
        return False

# In payment_service.py - modify notify_customer_about_payment_options
# payment_service.py faylƒ±nda notify_customer_about_payment_options funksiyasƒ±nƒ± d√ºz…ôldin

async def notify_customer_about_payment_options(order_id):
    """M√º≈üteriye √∂deme se√ßeneklerini g√∂sterir"""
    try:
        # Get order details with proper error checking
        order = get_order_details(order_id)
        
        if not order:
            logger.error(f"Order {order_id} not found")
            return False
        
        # Ensure price exists and is valid
        price_value = order.get('price')
        if price_value is None:
            logger.error(f"Order {order_id} price not set")
            return False
            
        # Ensure price is a valid number
        try:
            price = float(price_value)
        except (TypeError, ValueError):
            logger.error(f"Invalid price value for order {order_id}: {price_value}")
            return False
        
        # Calculate commission
        commission_rate = 0.12  # Default rate (12%)
        for tier, info in COMMISSION_RATES.items():
            if price <= info["threshold"]:
                commission_rate = info["rate"] / 100
                break
        
        admin_fee = round(price * commission_rate, 2)
        artisan_amount = price - admin_fee
        
        # Update values in database to ensure consistency
        set_order_price(order_id, price, admin_fee, artisan_amount)
        
        # Create payment method keyboard
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("üí≥ Kartla √∂d…ôni≈ü", callback_data=f"pay_card_{order_id}"),
            InlineKeyboardButton("üíµ Naƒüd √∂d…ôni≈ü", callback_data=f"pay_cash_{order_id}")
        )
        
        # Send payment options to customer
        customer_id = order.get('customer_id')
        customer = get_customer_by_id(customer_id)
        
        if not customer or not customer.get('telegram_id'):
            logger.error(f"Customer not found or missing telegram_id for order {order_id}")
            return False
            
        await bot.send_message(
            chat_id=customer['telegram_id'],
            text=f"üí∞ *√ñd…ôni≈ü √ºsulunu se√ßin*\n\n"
                 f"Sifari≈ü #{order_id} √º√ß√ºn √∂d…ôni≈ü m…ôbl…ôƒüi: *{price:.2f} AZN*\n\n"
                 f"Z…ôhm…ôt olmasa, √∂d…ôni≈ü √ºsulunu se√ßin:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        # Log successful notification
        logger.info(f"Payment options notification sent for order {order_id}")
        
        return True
        
    except Exception as e:
        logger.error(f"Error in notify_customer_about_payment_options: {e}", exc_info=True)
        return False
    

async def notify_artisan_about_payment_method(order_id, payment_method):
    """Ustaya se√ßilen √∂deme y√∂ntemi hakkƒ±nda bildirim g√∂nderir"""
    try:
        # Get order details
        order = get_order_details(order_id)
        if not order:
            logger.error(f"Order {order_id} not found for payment method notification")
            return False
        
        # Get artisan details
        artisan_id = order['artisan_id']
        artisan = get_artisan_by_id(artisan_id)
        if not artisan:
            logger.error(f"Artisan not found for order {order_id}")
            return False
        
        telegram_id = artisan.get('telegram_id')
        if not telegram_id:
            logger.error(f"Telegram ID not found for artisan {artisan_id}")
            return False
        
        # Get price information and ensure it's a valid number
        price = float(order.get('price', 0))
        
        # Calculate commission based on price
        commission_rate = 0.12  # Default rate (12%)
        
        for tier, info in COMMISSION_RATES.items():
            threshold = info.get("threshold")
            if threshold is not None and price <= threshold:
                commission_rate = info["rate"] / 100  # Convert percentage to decimal
                break
        
        admin_fee = round(price * commission_rate, 2)
        artisan_amount = price - admin_fee
        
        message_text = ""
        reply_markup = None
        
        if payment_method == "card":
            # Card payment
            message_text = (
                f"üí≥ *Kartla √∂d…ôni≈ü se√ßildi*\n\n"
                f"Sifari≈ü: #{order_id}\n"
                f"M…ôbl…ôƒü: {price} AZN\n"
                f"Komissiya ({int(commission_rate*100)}%): {admin_fee} AZN\n"
                f"Siz…ô qalacaq: {artisan_amount} AZN\n\n"
                f"M√º≈üt…ôri √∂d…ôni≈üi kart il…ô ed…ôc…ôk. "
                f"√ñd…ôni≈ü tamamlandƒ±qdan sonra 24 saat …ôrzind…ô hesabƒ±nƒ±za k√∂√ß√ºr√ºl…ôc…ôk."
            )
            reply_markup = None
        else:
            # Cash payment
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton(
                "‚úÖ √ñd…ôni≈üi t…ôsdiql…ô", 
                callback_data=f"confirm_art_payment_{order_id}"
            ))
            
            message_text = (
                f"üíµ *Naƒüd √∂d…ôni≈ü se√ßildi*\n\n"
                f"Sifari≈ü: #{order_id}\n"
                f"√úmumi m…ôbl…ôƒü: {price} AZN\n"
                f"Komissiya ({int(commission_rate*100)}%): {admin_fee} AZN\n"
                f"Siz…ô qalacaq: {artisan_amount} AZN\n\n"
                f"M√º≈üt…ôrid…ôn √∂d…ôni≈üi aldƒ±qdan sonra, 24 saat …ôrzind…ô komissiya m…ôbl…ôƒüini "
                f"admin kartƒ±na k√∂√ß√ºrm…ôlisiniz.\n\n"
                f"Admin kart m…ôlumatlarƒ±:\n"
                f"Kart n√∂mr…ôsi: {ADMIN_CARD_NUMBER}\n"
                f"Sahibi: {ADMIN_CARD_HOLDER}\n\n"
                f"‚ö†Ô∏è *Diqq…ôt*: 24 saat …ôrzind…ô komissiya √∂d…ôni≈üi edilm…ôzs…ô, "
                f"hesabƒ±nƒ±z avtomatik bloklanacaq v…ô m…ôbl…ôƒüin 15%-i h…ôcmind…ô …ôlav…ô c…ôrim…ô t…ôtbiq edil…ôc…ôk."
            )
            
            reply_markup = None
        
        # Send notification to artisan
        await bot.send_message(
            chat_id=telegram_id,
            text=message_text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        # Update payment method in database
        success = update_payment_method(order_id, payment_method)
        if not success:
            logger.error(f"Failed to update payment method for order {order_id}")
        
        # Log successful notification
        logger.info(f"Payment method notification sent to artisan for order {order_id}: {payment_method}")
        
        return True
        
    except Exception as e:
        logger.error(f"Error in notify_artisan_about_payment_method: {e}", exc_info=True)
        return False


async def notify_customer_about_card_payment(order_id):
    """M√º≈üteriye kart √∂deme bilgileri g√∂nderir"""
    try:
        # Get order details
        order = get_order_details(order_id)
        if not order:
            logger.error(f"Order {order_id} not found for card payment notification")
            return False
        
        # Get customer details
        customer = get_customer_by_id(order['customer_id'])
        if not customer:
            logger.error(f"Customer not found for order {order_id}")
            return False
        
        customer_telegram_id = customer.get('telegram_id')
        if not customer_telegram_id:
            logger.error(f"Customer telegram ID not found for order {order_id}")
            return False
        
        # Get artisan details
        artisan = get_artisan_by_id(order['artisan_id'])
        if not artisan:
            logger.error(f"Artisan not found for order {order_id}")
            return False
        
        # Get payment details
        card_number = artisan.get('payment_card_number')
        card_holder = artisan.get('payment_card_holder')
        
        if not card_number:
            # If artisan doesn't have a card set, use admin card
            card_number = ADMIN_CARD_NUMBER
            card_holder = ADMIN_CARD_HOLDER
        
        # Create payment confirmation keyboard
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton(
            "‚úÖ √ñd…ôni≈üi tamamladƒ±m", 
            callback_data=f"payment_completed_{order_id}"
        ))
        
        # Send card payment details to customer
        await bot.send_message(
            chat_id=customer_telegram_id,
            text=f"üí≥ *Kartla √∂d…ôni≈ü*\n\n"
                 f"Sifari≈ü: #{order_id}\n"
                 f"M…ôbl…ôƒü: {order.get('price', 0)} AZN\n\n"
                 f"√ñd…ôni≈ü m…ôlumatlarƒ±:\n"
                 f"Kart n√∂mr…ôsi: {card_number}\n"
                 f"Kart sahibi: {card_holder}\n\n"
                 f"Z…ôhm…ôt olmasa, √∂d…ôni≈üi tamamladƒ±qdan sonra a≈üaƒüƒ±dakƒ± d√ºym…ôni basƒ±n v…ô "
                 f"√∂d…ôni≈ü q…ôbzini ≈ü…ôkil olaraq g√∂nd…ôrin.",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        return True
        
    except Exception as e:
        logger.error(f"Error in notify_customer_about_card_payment: {e}")
        return False

async def notify_customer_about_cash_payment(order_id):
    """M√º≈üteriye nakit √∂deme hakkƒ±nda bildirim g√∂nderir"""
    try:
        # Get order details
        order = get_order_details(order_id)
        if not order:
            logger.error(f"Order {order_id} not found for cash payment notification")
            return False
        
        # Get customer details
        customer = get_customer_by_id(order['customer_id'])
        if not customer:
            logger.error(f"Customer not found for order {order_id}")
            return False
        
        customer_telegram_id = customer.get('telegram_id')
        if not customer_telegram_id:
            logger.error(f"Customer telegram ID not found for order {order_id}")
            return False
        
        # Create payment confirmation keyboard
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton(
            "‚úÖ Naƒüd √∂d…ôni≈üi etdim", 
            callback_data=f"cash_payment_made_{order_id}"
        ))
        
        # Send cash payment notification to customer
        await bot.send_message(
            chat_id=customer_telegram_id,
            text=f"üíµ *Naƒüd √∂d…ôni≈ü*\n\n"
                 f"Sifari≈ü: #{order_id}\n"
                 f"M…ôbl…ôƒü: {order.get('price', 0)} AZN\n\n"
                 f"Z…ôhm…ôt olmasa, √∂d…ôni≈üi ustaya naƒüd ≈ü…ôkild…ô edin v…ô "
                 f"√∂d…ôni≈üi etdikd…ôn sonra a≈üaƒüƒ±dakƒ± d√ºym…ôni basƒ±n.\n\n"
                 f"‚ö†Ô∏è Diqq…ôt: Ustadan √∂d…ôni≈üi aldƒ±ƒüƒ±na dair t…ôsdiq ist…ônil…ôc…ôk.",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        return True
        
    except Exception as e:
        logger.error(f"Error in notify_customer_about_cash_payment: {e}")
        return False

async def handle_admin_payment_deadline(order_id):
    """Ustanƒ±n admin √∂deme s√ºre sƒ±nƒ±rƒ±nƒ± y√∂netir"""
    try:
        # Wait for 24 hours
        await asyncio.sleep(24 * 60 * 60)  # 24 hours
        
        # Get order details
        order = get_order_details(order_id)
        if not order:
            logger.error(f"Order {order_id} not found for admin payment deadline")
            return
        
        # Check if commission has been paid
        # This would require additional database fields to track commission payment status
        # For now, we'll assume it hasn't been paid
        
        # Get payment details
        payment_method = order.get('payment_method', '')
        if payment_method != 'cash':
            logger.info(f"Order {order_id} is not cash payment, skipping admin payment deadline")
            return
        
        # Get artisan details
        artisan_id = order['artisan_id']
        artisan = get_artisan_by_id(artisan_id)
        if not artisan:
            logger.error(f"Artisan not found for order {order_id}")
            return
        
        telegram_id = artisan.get('telegram_id')
        if not telegram_id:
            logger.error(f"Telegram ID not found for artisan {artisan_id}")
            return
        
        # Calculate fee and fine
        price = order.get('price', 0)
        commission_rate = 0.12  # Default rate (12%)
        
        for tier, info in COMMISSION_RATES.items():
            if price <= info["threshold"]:
                commission_rate = info["rate"] / 100  # Convert percentage to decimal
                break
        
        admin_fee = round(price * commission_rate, 2)
        fine_percentage = 0.15  # 15% fine
        fine_amount = round(admin_fee * fine_percentage, 2)
        total_amount = admin_fee + fine_amount
        
        # Send warning to artisan
        await bot.send_message(
            chat_id=telegram_id,
            text=f"‚ö†Ô∏è *Komissiya √∂d…ôni≈üi x…ôb…ôrdarlƒ±ƒüƒ±*\n\n"
                 f"Sifari≈ü #{order_id} √º√ß√ºn komissiya √∂d…ôni≈üi m√ºdd…ôti bitdi.\n\n"
                 f"ƒ∞lkin komissiya: {admin_fee} AZN\n"
                 f"∆èlav…ô c…ôrim…ô (15%): {fine_amount} AZN\n"
                 f"√ñd…ônilm…ôli m…ôbl…ôƒü: {total_amount} AZN\n\n"
                 f"Bu m…ôbl…ôƒüi 6 saat …ôrzind…ô √∂d…ôm…ôs…ôniz, hesabƒ±nƒ±z bloklanacaq.\n"
                 f"√ñd…ôni≈ü etm…ôk √º√ß√ºn admin kart m…ôlumatlarƒ±:\n"
                 f"Kart n√∂mr…ôsi: {ADMIN_CARD_NUMBER}\n"
                 f"Sahibi: {ADMIN_CARD_HOLDER}",
            parse_mode="Markdown"
        )
        
        # Schedule blocking after 6 more hours if not paid
        asyncio.create_task(block_artisan_for_nonpayment(order_id, artisan_id, total_amount, 6))
        
    except Exception as e:
        logger.error(f"Error in handle_admin_payment_deadline: {e}")

async def block_artisan_for_nonpayment(order_id, artisan_id, amount, hours):
    """√ñdeme yapmamasƒ± durumunda ustayƒ± bloklar"""
    try:
        # Wait for specified hours
        await asyncio.sleep(hours * 60 * 60)
        
        # Check if payment has been made
        # This would require additional database fields
        # For now, assume it hasn't been paid
        
        # Block artisan
        from db import block_artisan
        block_reason = f"Sifari≈ü #{order_id} √º√ß√ºn komissiya √∂d…ôni≈üi edilm…ôdi"
        
        success = block_artisan(artisan_id, block_reason, amount)
        
        if success:
            # Get artisan telegram ID
            artisan = get_artisan_by_id(artisan_id)
            if not artisan or not artisan.get('telegram_id'):
                logger.error(f"Could not get telegram ID for artisan {artisan_id}")
                return
            
            # Notify artisan
            await bot.send_message(
                chat_id=artisan['telegram_id'],
                text=f"‚õî *Hesabƒ±nƒ±z bloklandƒ±*\n\n"
                     f"S…ôb…ôb: {block_reason}\n\n"
                     f"Bloku a√ßmaq √º√ß√ºn {amount} AZN √∂d…ôni≈ü etm…ôlisiniz.\n"
                     f"√ñd…ôni≈ü etm…ôk √º√ß√ºn: /pay_fine komandasƒ± il…ô …ôtraflƒ± m…ôlumat ala bil…ôrsiniz.",
                parse_mode="Markdown"
            )
        
    except Exception as e:
        logger.error(f"Error in block_artisan_for_nonpayment: {e}")